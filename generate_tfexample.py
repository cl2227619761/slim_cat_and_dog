# -*- conding: utf-8 -*-
"""
convert images in the list to tfrecord file

Example Usage:
------------------------
python generate_tfexample.py \
    --list_path: Path to the .txt file previously generated by generate_list.py.
    --data_dir: Path to the main dir of images (directory).
    --record_path: Path to the output tfrecord file.
"""

import os
import tensorflow as tf
import sys

flags = tf.app.flags
flags.DEFINE_string("list_path", None, "Path to the .txt file previously generated by generate_list.py.")
flags.DEFINE_string("data_dir", None, "Path to the main dir of images (directory).")
flags.DEFINE_string("record_path", None, "Path to the output tfrecord file.")
FLAGS = flags.FLAGS


def int64_feature(value):
    """Return a TF_Feature of int64.
    
    Args:
      value: A scalar of list of values.
    
    Returns:
      A TF-Feature.
    """
    if not isinstance(value, (tuple, list)):
        value = [value]
    return tf.train.Feature(int64_list=tf.train.Int64List(value=value))
    
    
def bytes_feature(value):
    """Return a TF-Feature of bytes.
    
    Args:
      value: A string.
      
    Returns:
      A TF-Feature.
    """
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))
    
    
def float_feature(value):
    """Return a TF-Feature of floats.
    
    Args:
      value: A scalar of list of values.
    
    Returns:
      A TF-Feature.
    """
    if not isinstance(value, (tuple, list)):
        value = [value]
    return tf.train.Feature(float_list=tf.train.FloatList(value=value))
    

def image_to_tfexample(image_data, image_format, height, width, class_id):
    return tf.train.Example(features=tf.train.Features(feature={
        "image/encoded": bytes_feature(image_data),
        "image/format": bytes_feature(image_format),
        "image/class/label": int64_feature(class_id),
        "image/height": int64_feature(height),
        "image/width": int64_feature(width),
    }))


def convert_dataset(list_path, data_dir, record_path):
    fd = open(list_path)
    lines = [line.split() for line in fd]
    fd.close()
    
    with tf.Graph().as_default():
        decode_jpeg_data = tf.placeholder(dtype=tf.string)
        decode_jpeg = tf.image.decode_jpeg(decode_jpeg_data, channels=3)
        with tf.Session("") as sess:
            tfrecord_writer = tf.python_io.TFRecordWriter(record_path)
            
            for i in range(len(lines)):
                image_data = tf.gfile.FastGFile(os.path.join(data_dir, lines[i][0]), "rb").read()
                image = sess.run(decode_jpeg, feed_dict={decode_jpeg_data: image_data})
                height, width = image.shape[0], image.shape[1]
                example = image_to_tfexample(image_data, b"jpg", height, width, int(lines[i][1]))
                tfrecord_writer.write(example.SerializeToString())
            tfrecord_writer.close()


def main(_):
    # os.system("mkdir train")
    list_path = FLAGS.list_path
    data_dir = FLAGS.data_dir
    record_path = FLAGS.record_path
    convert_dataset(list_path, data_dir, record_path)
    
    
if __name__ == "__main__":
    tf.app.run()
