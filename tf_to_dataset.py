# -*- coding: utf-8 -*-
"""
read the tfrecord file previously generated by generate_tfexample.py
"""

import os
import tensorflow as tf
import tensorflow.contrib.slim as slim


def get_dataset(dataset_dir, num_samples, num_classes, labels_to_names_path=None, file_pattern="*.tfrecord"):
    """read dataset from tfrecord file
    
    Args:
      dataset_dir: the file containing the tfrecord file.
      num_samples: number of samples for training.
      num_classes: number of classes.
      labels_to_names_path: path to the labels names txt file.
      file_pattern: the form of tfrecord file.
    
    Returns:
      Dataset generated using the tfrecord file previously generated.
    """
    file_pattern = os.path.join(dataset_dir, file_pattern)
    keys_to_features = {
        "image/encoded": tf.FixedLenFeature((), tf.string, default_value=""),
        "image/format": tf.FixedLenFeature((), tf.string, default_value="jpg"),
        "image/class/label": tf.FixedLenFeature([], tf.int64, default_value=tf.zeros([], dtype=tf.int64)),
    }
    items_to_handlers = {
        "image": slim.tfexample_decoder.Image(shape=[227, 227, 3], channels=3),
        "label": slim.tfexample_decoder.Tensor("image/class/label"),
    }
    decoder = slim.tfexample_decoder.TFExampleDecoder(keys_to_features, items_to_handlers)
    items_to_descriptions = {
        "image": "A color image with shape of 227*227.",
        "label": "A single integer of 0 or 1.",
    }
    
    labels_to_names = None
    if labels_to_names_path is not None:
        fd = open(labels_to_names_path)
        labels_to_names = {i: line.strip() for i, line in enumerate(fd)}
        fd.close()
    
    return slim.dataset.Dataset(
        data_sources=file_pattern,
        reader=tf.TFRecordReader,
        decoder=decoder,
        num_samples=num_samples,
        num_classes=num_classes,
        items_to_descriptions=items_to_descriptions,
        labels_to_names=labels_to_names
    )
